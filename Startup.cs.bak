using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using FastReport.Web;

using ASP_Web_Reports.Models;

namespace ASP_Web_Reports
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
            LocalContext.Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        readonly string CorsPolicy = "_Origin";
        readonly string[] AllowOrigin = { "http://localhost", "http://127.0.0.1", "http://192.168.0.158" };


        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            //services.AddSingleton<IConfiguration>(Configuration);
            services.Configure<IISOptions>(options => {
                options.AutomaticAuthentication = false;
            });
            services.Configure<CookiePolicyOptions>(options =>
            {
                // This lambda determines whether user consent for non-essential cookies is needed for a given request.
                options.CheckConsentNeeded = context => false;
                options.MinimumSameSitePolicy = SameSiteMode.None;
            });
            services.AddCors(options => {
                options.AddPolicy(CorsPolicy, builder =>
                {
                    builder.AllowAnyOrigin(); builder.AllowAnyMethod(); builder.AllowAnyHeader();
                });
            });

            services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);
            services.AddSession(options => {
                options.Cookie.IsEssential = true;
                options.Cookie.HttpOnly = true;
                options.IdleTimeout = TimeSpan.FromHours(9);
                options.Cookie.Name = "tyf.reports";
            });
            /*services.AddDbContext<SPContext>(options =>
                options.UseSqlServer(Configuration.GetConnectionString("WMBContext")));*/
            /*services.AddDbContext<LocalContext>(options => 
                options.UseSqlServer(Configuration.GetConnectionString("ManagementContext")));
            services.AddScoped<LocalContext>();
            services.AddDbContextPool<LocalContext>(options => 
                options.UseSqlServer(Configuration.GetConnectionString("ManagementContext")));*/
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
            FastReport.Utils.RegisteredObjects.AddConnection(typeof(MsSqlDataConnection));
            app.UseFastReport();
            app.UseStaticFiles();
            //app.UseCookiePolicy(); app.use
            app.UseSession();
            app.UseCors(CorsPolicy);
            app.UseMvc(routes =>
            {
                routes.MapRoute(
                    name: "default",
                    template: "{controller=Home}/{action=Index}/{id?}");
                routes.MapRoute(
                    "others",
                    "{*.}", new {
                        controller = "Base", action = "Others"
                    }
                );
            });
        }

    }
    public class MsSqlDataConnection : FastReport.Data.DataConnectionBase {
        public override string QuoteIdentifier(string value, System.Data.Common.DbConnection connection) {
            return "\"" + value + "\"";
        }

        public override System.Type GetConnectionType() {
            return typeof(System.Data.SqlClient.SqlConnection);
        }

        public override System.Type GetParameterType() {
            return typeof(System.Data.SqlDbType);
        }

        public override System.Data.Common.DbDataAdapter GetAdapter(string selectCommand, System.Data.Common.DbConnection connection, FastReport.Data.CommandParameterCollection parameters) {
            System.Data.SqlClient.SqlDataAdapter adapter = new System.Data.SqlClient.SqlDataAdapter(selectCommand, connection as System.Data.SqlClient.SqlConnection);
            foreach (FastReport.Data.CommandParameter p in parameters) {
                System.Data.SqlClient.SqlParameter parameter = adapter.SelectCommand.Parameters.Add(p.Name, (System.Data.SqlDbType)p.DataType, p.Size);
                parameter.Value = p.Value;
            }
            return adapter;
        }
    }
}
